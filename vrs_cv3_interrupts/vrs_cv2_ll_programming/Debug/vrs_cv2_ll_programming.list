
vrs_cv2_ll_programming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010420  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b0f  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003b3  00000000  00000000  00010f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00011318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  00011448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013d8b  00000000  00000000  00011540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012df  00000000  00000000  000252cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006c37a  00000000  00000000  000265aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00092924  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000035c  00000000  00000000  00092978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000400 	.word	0x08000400

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000400 	.word	0x08000400

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
	  *((volatile uint32_t *)((uint32_t)(0x48000400 + 0x04U))) &= ~(1 << 3);
	  *((volatile uint32_t *)((uint32_t)(0x48000400 + 0x08U))) &= ~(0x3 << 6);
	  *((volatile uint32_t *)((uint32_t)(0x48000400 + 0x0CU))) |= (1 << 12);
	  *((volatile uint32_t *)((uint32_t)(0x48000400 + 0x0CU))) &= ~(0x3 << 6);
*/
	  RCC_AHBENR_REG|= (uint32_t)(1 << 18);//RCC寄存器，给PB口使能时钟。
 80001ce:	4b3c      	ldr	r3, [pc, #240]	; (80002c0 <main+0xf8>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a3b      	ldr	r2, [pc, #236]	; (80002c0 <main+0xf8>)
 80001d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001d8:	6013      	str	r3, [r2, #0]
	  /*GPIOB pin 3 and 6 setup*/
	  /*GPIO MODER register*/
	  //Set mode for pin 3，，所有数据在写寄存器运算时要转化为32位
	  GPIOB_MODER_REG &= ~(uint32_t)(0x3 << 6);//设定gpio寄存器模式 PB3口为输入复位
 80001da:	4b3a      	ldr	r3, [pc, #232]	; (80002c4 <main+0xfc>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a39      	ldr	r2, [pc, #228]	; (80002c4 <main+0xfc>)
 80001e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001e4:	6013      	str	r3, [r2, #0]
	  GPIOB_MODER_REG|= (uint32_t)(1 << 6);//设定PB3口为01，通用输出模式。
 80001e6:	4b37      	ldr	r3, [pc, #220]	; (80002c4 <main+0xfc>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a36      	ldr	r2, [pc, #216]	; (80002c4 <main+0xfc>)
 80001ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001f0:	6013      	str	r3, [r2, #0]
	  //Set mode for pin 6 设置PB6口为输入复位状态
	  GPIOB_MODER_REG &= ~(uint32_t)(0x3 << 12);//设置PB6口为输入复位状态
 80001f2:	4b34      	ldr	r3, [pc, #208]	; (80002c4 <main+0xfc>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a33      	ldr	r2, [pc, #204]	; (80002c4 <main+0xfc>)
 80001f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80001fc:	6013      	str	r3, [r2, #0]
	  /*GPIO OTYPER register*/
	  GPIOB_OTYPER_REG &= ~(1 << 3);
 80001fe:	4b32      	ldr	r3, [pc, #200]	; (80002c8 <main+0x100>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a31      	ldr	r2, [pc, #196]	; (80002c8 <main+0x100>)
 8000204:	f023 0308 	bic.w	r3, r3, #8
 8000208:	6013      	str	r3, [r2, #0]
	  /*GPIO OSPEEDR register*/
	  //Set Low speed for GPIOB pin 3
	  GPIOB_OSPEEDER_REG &= ~(0x3 << 6);
 800020a:	4b30      	ldr	r3, [pc, #192]	; (80002cc <main+0x104>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a2f      	ldr	r2, [pc, #188]	; (80002cc <main+0x104>)
 8000210:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000214:	6013      	str	r3, [r2, #0]
	  /*GPIO PUPDR register, reset*/
	  //Set pull up for GPIOB pin 6 (input)
	  GPIOB_PUPDR_REG |= (1 << 12);//01上拉
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <main+0x108>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a2d      	ldr	r2, [pc, #180]	; (80002d0 <main+0x108>)
 800021c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000220:	6013      	str	r3, [r2, #0]
	  //Set no pull for GPIOB pin 3
	  GPIOB_PUPDR_REG &= ~(0x3 << 6);
 8000222:	4b2b      	ldr	r3, [pc, #172]	; (80002d0 <main+0x108>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a2a      	ldr	r2, [pc, #168]	; (80002d0 <main+0x108>)
 8000228:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800022c:	6013      	str	r3, [r2, #0]

	  while (1)
	  {
		  //GPIO IDR, read input from pin 6 用输入数据寄存器读取PB6口数据
		  if(!(GPIOB_IDR_REG & (1 << 6)))
 800022e:	4b29      	ldr	r3, [pc, #164]	; (80002d4 <main+0x10c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000236:	2b00      	cmp	r3, #0
 8000238:	d120      	bne.n	800027c <main+0xb4>
		  {
			  //GPIO BSRR register, set output pin 3
			  LED_ON;
 800023a:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <main+0x110>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a26      	ldr	r2, [pc, #152]	; (80002d8 <main+0x110>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	6013      	str	r3, [r2, #0]
			  //delay
			  for(uint16_t i = 0; i < 0xFF00; i++){}
 8000246:	2300      	movs	r3, #0
 8000248:	81fb      	strh	r3, [r7, #14]
 800024a:	e002      	b.n	8000252 <main+0x8a>
 800024c:	89fb      	ldrh	r3, [r7, #14]
 800024e:	3301      	adds	r3, #1
 8000250:	81fb      	strh	r3, [r7, #14]
 8000252:	89fb      	ldrh	r3, [r7, #14]
 8000254:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000258:	d3f8      	bcc.n	800024c <main+0x84>
			  //GPIO BRR, reset output pin 3
			  LED_OFF;
 800025a:	4b20      	ldr	r3, [pc, #128]	; (80002dc <main+0x114>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <main+0x114>)
 8000260:	f043 0308 	orr.w	r3, r3, #8
 8000264:	6013      	str	r3, [r2, #0]
			  //delay
			  for(uint16_t i = 0; i < 0xFF00; i++){}
 8000266:	2300      	movs	r3, #0
 8000268:	81bb      	strh	r3, [r7, #12]
 800026a:	e002      	b.n	8000272 <main+0xaa>
 800026c:	89bb      	ldrh	r3, [r7, #12]
 800026e:	3301      	adds	r3, #1
 8000270:	81bb      	strh	r3, [r7, #12]
 8000272:	89bb      	ldrh	r3, [r7, #12]
 8000274:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000278:	d3f8      	bcc.n	800026c <main+0xa4>
 800027a:	e7d8      	b.n	800022e <main+0x66>
		  }
		  else
		  {
			  //GPIO BSRR register, set output pin 3
			  LED_ON;
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <main+0x110>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a15      	ldr	r2, [pc, #84]	; (80002d8 <main+0x110>)
 8000282:	f043 0308 	orr.w	r3, r3, #8
 8000286:	6013      	str	r3, [r2, #0]
			  //delay
			  for(uint32_t i = 0; i < 0xFFFF0; i++){}
 8000288:	2300      	movs	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	e002      	b.n	8000294 <main+0xcc>
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	3301      	adds	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <main+0x118>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d9f8      	bls.n	800028e <main+0xc6>
			  //GPIO BRR, reset output pin 3
			  LED_OFF;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <main+0x114>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <main+0x114>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]
			  //delay
			  for(uint32_t i = 0; i < 0xFFF00; i++){}
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	e002      	b.n	80002b4 <main+0xec>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <main+0x11c>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d9f8      	bls.n	80002ae <main+0xe6>
		  if(!(GPIOB_IDR_REG & (1 << 6)))
 80002bc:	e7b7      	b.n	800022e <main+0x66>
 80002be:	bf00      	nop
 80002c0:	40021014 	.word	0x40021014
 80002c4:	48000400 	.word	0x48000400
 80002c8:	48000404 	.word	0x48000404
 80002cc:	48000408 	.word	0x48000408
 80002d0:	4800040c 	.word	0x4800040c
 80002d4:	48000410 	.word	0x48000410
 80002d8:	48000418 	.word	0x48000418
 80002dc:	48000428 	.word	0x48000428
 80002e0:	000fffef 	.word	0x000fffef
 80002e4:	000ffeff 	.word	0x000ffeff

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <UsageFault_Handler+0x4>

08000306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x20>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <SystemInit+0x20>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800039c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0b      	ldr	r4, [pc, #44]	; (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800038e:	f7ff ffd7 	bl	8000340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000392:	f000 f811 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000396:	f7ff ff17 	bl	80001c8 <main>

0800039a <LoopForever>:

LoopForever:
    b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800039c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	; (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	; (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	; (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	; (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
